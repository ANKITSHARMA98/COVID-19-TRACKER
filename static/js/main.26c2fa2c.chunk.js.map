{"version":3,"sources":["InfoBox.js","LineGraph.js","Table.js","util.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","Table","countries","map","country","i","key","casesTypeColors","hex","multiplier","recovered","deaths","sortData","sort","b","prettyPrintStat","stat","Map","center","zoom","TileLayer","url","attribution","Circle","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","name","iso2","sortedData","getCountriesData","console","log","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.26c2fa2c.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./InfoBox.css\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\r\n    return (\r\n        <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"}`}>\r\n            <CardContent>\r\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n                </Typography>\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>   \r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n          label: function (tooltipItem, data) {\r\n            return numeral(tooltipItem.value).format(\"+0,0\");\r\n          },\r\n        },  \r\n    },\r\n    scales: {\r\n        xAxes: [\r\n          {\r\n            type: \"time\",\r\n            time: {\r\n              format: \"MM/DD/YY\",\r\n              tooltipFormat: \"ll\",\r\n            },\r\n          },\r\n        ],\r\n        yAxes: [\r\n          {\r\n            gridLines: {\r\n              display: false,\r\n            },\r\n            ticks: {              \r\n              callback: function (value, index, values) {\r\n                return numeral(value).format(\"0a\");\r\n              },\r\n            },\r\n          },\r\n        ],\r\n    },\r\n}\r\n\r\n    \r\nconst buildChartData = (data, casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n    for(let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = 'cases', ...props}) {\r\n    const [data, setData] = useState({});\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then(response => {\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                let chartData = buildChartData(data, casesType);\r\n                setData(chartData);\r\n            });\r\n\r\n        };\r\n\r\n        fetchData();\r\n        \r\n    }, [casesType]);\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && (\r\n                <Line\r\n                options={options}\r\n    \r\n                data={{\r\n                    datasets: [\r\n                        {\r\n                            backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                            borderColor: \"#CC1034\",\r\n                            data: data,\r\n                        },\r\n                    ],\r\n                }} />\r\n\r\n            )}\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n    {countries.map((country,i) => (\r\n        <tr key ={i}>\r\n          <td>{country.country}</td>\r\n          <td>\r\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      multiplier: 800,\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n      multiplier: 1200,\r\n    },\r\n    deaths: {\r\n      hex: \"#fb4443\",\r\n      multiplier: 2000,\r\n    },\r\n};\r\n\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    return sortedData.sort((a,b) => (a.cases > b.cases ? -1 :1));\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country,i) => (\r\n    <Circle\r\n      key = {i}\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from 'react';\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' />\r\n                {/*loop through */}\r\n                {showDataOnMap(countries, casesType)}\r\n\r\n\r\n            </LeafletMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport numeral from \"numeral\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst App = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(2);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  console.log(casesType);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        if(countryCode === \"worldwide\"){\n          setMapCenter({ lat: 34.80746, lng: -40.4796 });\n          setMapZoom(2);\n        }\n        else{\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setMapZoom(4);\n        }\n\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country,i) => (\n                <MenuItem key = {i} value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <div className=\"app__information\">\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3>Worldwide new {casesType}</h3>\n            <LineGraph casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}